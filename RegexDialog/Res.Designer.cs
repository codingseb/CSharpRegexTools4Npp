//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegexDialog {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Res {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Res() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RegexDialog.Res", typeof(Res).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Collections;
        ///using System.Collections.Generic;
        ///using System.Collections.ObjectModel;
        ///using System.ComponentModel;
        ///using System.Globalization;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Text.RegularExpressions;
        ///using RegexDialog;
        /////usings
        ///
        ///public class CSharpReplaceContainer
        ///{
        ///    //global
        ///
        ///    //match
        ///    public string Replace(Match match, int matchIndex, string fileName, int globalIndex, int fileIndex)
        ///    {
        ///        //code
        ///    }
        ///    //endmatch
        ///
        ///    public string B [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CSharpReplaceAutoCompleteTemplate {
            get {
                return ResourceManager.GetString("CSharpReplaceAutoCompleteTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to             CSharpReplaceContainer container = new CSharpReplaceContainer();
        ///
        ///            string fileName = &quot;-&quot;;
        ///
        ///            input = container.Before(input, fileName);
        ///
        ///            int index = -1;
        ///            // To make a replace
        ///            string replace = regex.Replace(input, match =&gt;
        ///            {
        ///                index++;
        ///                return container.Replace(match, index, fileName, index, 0);
        ///            });
        ///
        ///            replace = container.After(replace, fileName);
        ///
        ///            Con [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CSharpReplaceCallingCode {
            get {
                return ResourceManager.GetString("CSharpReplaceCallingCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Collections;
        ///using System.Collections.Generic;
        ///using System.Collections.ObjectModel;
        ///using System.ComponentModel;
        ///using System.Globalization;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Text.RegularExpressions;
        ///using RegexDialog;
        /////usings
        ///
        ///public class CSharpReplaceContainer
        ///{
        ///    //global
        ///
        ///    //match
        ///    public string Replace(Match match, int matchIndex, string fileName, int globalIndex, int fileIndex)
        ///    {
        ///        //code
        ///    }
        ///    //endmatch
        ///
        ///    //group
        ///    pu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CSharpReplaceContainer {
            get {
                return ResourceManager.GetString("CSharpReplaceContainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
        ///&lt;SyntaxDefinition name=&quot;Regex&quot; xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///    &lt;Color name=&quot;CharClass&quot; foreground=&quot;Blue&quot; fontWeight=&quot;bold&quot;/&gt;
        ///    &lt;Color name=&quot;NegativeCharClass&quot; foreground=&quot;OrangeRed&quot; fontWeight=&quot;bold&quot;/&gt;
        ///    &lt;Color name=&quot;Quantifier&quot; foreground=&quot;DarkViolet&quot; fontWeight=&quot;bold&quot;/&gt;
        ///    &lt;Color name=&quot;QuantifierNumber&quot; foreground=&quot;Red&quot; fontWeight=&quot;normal&quot;/&gt;
        ///    &lt;Color name=&quot;CharEscape&quot; foreground=&quot;Gray&quot; fontWeight=&quot;normal&quot;/&gt;
        ///    &lt;Color name=&quot;Comment [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Regex_syntax_color {
            get {
                return ResourceManager.GetString("Regex_syntax_color", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [
        ///  {
        ///    &quot;Name&quot;: &quot;Character Escapes&quot;,
        ///    &quot;Description&quot;: &quot;Escape characters that signal to the regular expression parser a special char&quot;,
        ///    &quot;Elements&quot;: [
        ///      {
        ///        &quot;Name&quot;: &quot;Bell &quot;,
        ///        &quot;Description&quot;: &quot;Matches a bell (alarm) \\u0007.&quot;,
        ///        &quot;Value&quot;: &quot;\\a&quot;
        ///      },
        ///      {
        ///        &quot;Name&quot;: &quot;Backspace &quot;,
        ///        &quot;Description&quot;: &quot;Matches a backspace \\u0008 if in a [] character class&quot;,
        ///        &quot;Value&quot;: &quot;\\b&quot;
        ///      },
        ///      {
        ///        &quot;Name&quot;: &quot;Tab &quot;,
        ///        &quot;Description&quot;: &quot;Matches  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RegexLanguageElements {
            get {
                return ResourceManager.GetString("RegexLanguageElements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;Compiled&quot;: &quot;Specifies that the regular expression is compiled to an assembly.\r\nThis yields faster execution but increases startup time.\r\nThis value should not be assigned to the Options property when calling the CompileToAssembly(RegexCompilationInfo[], AssemblyName) method.&quot;,
        ///  &quot;CultureInvariant&quot;: &quot;Specifies that cultural differences in language is ignored.&quot;,
        ///  &quot;ECMAScript&quot;: &quot;Enables ECMAScript-compliant behavior for the expression.\r\nThis value can be used only in conjunction with the IgnoreC [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RegexOptionsDescriptions {
            get {
                return ResourceManager.GetString("RegexOptionsDescriptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
        ///&lt;SyntaxDefinition name=&quot;Regex&quot; xmlns=&quot;http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008&quot;&gt;
        ///    &lt;Color name=&quot;Substitution&quot; foreground=&quot;Blue&quot; fontWeight=&quot;bold&quot;/&gt;
        ///
        ///    &lt;RuleSet&gt;
        ///        &lt;Rule color=&quot;Substitution&quot;&gt;
        ///            \$([$`&apos;+_&amp;amp;]|\d+(?!\d)|([{]\w*[}]))
        ///        &lt;/Rule&gt;
        ///    &lt;/RuleSet&gt;
        ///&lt;/SyntaxDefinition&gt;.
        /// </summary>
        public static string Replace_syntax_color {
            get {
                return ResourceManager.GetString("Replace_syntax_color", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;Data&quot;: [
        ///    {
        ///      &quot;Name&quot;: &quot;Value of matched group by group number &quot;,
        ///      &quot;Description&quot;: &quot;Substitutes the last substring matched by group number (decimal).&quot;,
        ///      &quot;Value&quot;: &quot;$number&quot;
        ///    },
        ///    {
        ///      &quot;Name&quot;: &quot;Value of matched group by group name &quot;,
        ///      &quot;Description&quot;: &quot;Substitutes the last substring matched by group name (string).&quot;,
        ///      &quot;Value&quot;: &quot;${name}&quot;
        ///    },
        ///    {
        ///      &quot;Name&quot;: &quot;Dollar sign &quot;,
        ///      &quot;Description&quot;: &quot;Substitutes a single \&quot;$\&quot; literal.&quot;,
        ///      &quot;Value&quot;: &quot;$$&quot;
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ReplaceLanguageElements {
            get {
                return ResourceManager.GetString("ReplaceLanguageElements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to             // To make a replace
        ///            string replace = regex.Replace(input, replacement);
        ///            Console.WriteLine(replace);
        ///
        ///            //To get all matches
        ///            MatchCollection matches = regex.Matches(input);
        ///            Console.WriteLine(string.Join(&quot;\r\n&quot;, matches.Cast&lt;Match&gt;().Select(match =&gt; match.Value)));.
        /// </summary>
        public static string StandardReplaceCode {
            get {
                return ResourceManager.GetString("StandardReplaceCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   &lt;ItemGroup&gt;
        ///    &lt;Resource Include=&quot;TextSource.txt&quot; /&gt;
        ///  &lt;/ItemGroup&gt;
        ///.
        /// </summary>
        public static string TextSourceAsResourceInCsProj {
            get {
                return ResourceManager.GetString("TextSourceAsResourceInCsProj", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Collections;
        ///using System.Collections.Generic;
        ///using System.Collections.ObjectModel;
        ///using System.ComponentModel;
        ///using System.Globalization;
        ///using System.Linq;
        ///using System.Text;
        ///using System.Text.RegularExpressions;
        ///using RegexDialog;
        /////usings
        ///
        ///public class TextSourceContainer
        ///{
        ///    public object Get()
        ///    {
        ///        //code
        ///    }
        ///}
        ///.
        /// </summary>
        public static string TextSourceContainer {
            get {
                return ResourceManager.GetString("TextSourceContainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Linq;
        ///using System.Text.RegularExpressions;
        ///
        ///namespace _projectname_
        ///{
        ///    class Program
        ///    {
        ///        private readonly static string pattern = &quot;$pattern$&quot;;
        ///        private readonly static string replacement = &quot;$replacement$&quot;;
        ///        private readonly static RegexOptions options = _options_;
        ///        private readonly static Regex regex = new Regex(pattern, options);
        ///
        ///        private static string input = (new TextSourceContainer()).Get().ToString();
        ///
        ///        static v [rest of string was truncated]&quot;;.
        /// </summary>
        public static string VSProgram {
            get {
                return ResourceManager.GetString("VSProgram", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;
        ///
        ///  &lt;PropertyGroup&gt;
        ///    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
        ///    &lt;TargetFramework&gt;netcoreapp3.0&lt;/TargetFramework&gt;
        ///  &lt;/PropertyGroup&gt;
        ///
        ///&lt;!-- Resources --&gt;
        ///&lt;/Project&gt;
        ///.
        /// </summary>
        public static string VSProject {
            get {
                return ResourceManager.GetString("VSProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft Visual Studio Solution File, Format Version 12.00
        ///Project(&quot;{$guid2$}&quot;) = &quot;$projectname$&quot;, &quot;$projectname$\$projectname$.csproj&quot;, &quot;{$guid1$}&quot;
        ///EndProject
        ///Global
        ///	GlobalSection(SolutionConfigurationPlatforms) = preSolution
        ///		Debug|Any CPU = Debug|Any CPU
        ///		Release|Any CPU = Release|Any CPU
        ///	EndGlobalSection
        ///	GlobalSection(ProjectConfigurationPlatforms) = postSolution
        ///		{$guid1$}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
        ///		{$guid1$}.Debug|Any CPU.Build.0 = Debug|Any CPU
        ///		{$guid1$}.Release|Any [rest of string was truncated]&quot;;.
        /// </summary>
        public static string VSSolution {
            get {
                return ResourceManager.GetString("VSSolution", resourceCulture);
            }
        }
    }
}
